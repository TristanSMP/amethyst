generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Application {
  id        String             @id
  data      Json
  status    Application_status @default(PendingReview)
  reviewer  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime
  userId    String             @unique
}

model AuctionedItem {
  id        String               @id
  price     Int
  status    AuctionedItem_status @default(ACTIVE)
  sellerId  String
  createdAt DateTime             @default(now())
  updatedAt DateTime
  typeb64   String?
  buyerId   String?
  userId    String?

  @@index([buyerId])
  @@index([sellerId])
  @@index([typeb64])
  @@index([userId])
}

model BlogBook {
  id        String   @id
  title     String
  content   String   @db.Text
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([authorId])
}

model CacheKV {
  key       String   @id
  value     String   @db.Text
  createdAt DateTime @default(now())
}

model Example {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Image {
  id           String             @id
  creatorId    String
  url          String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  reviewStatus Image_reviewStatus @default(Pending)
  reviewer     String?

  @@index([creatorId])
}

model ItemType {
  base64       String   @db.Text
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  b64key       String   @unique
  id           String   @id
  namespacedId String
  metadata     Json
}

model MinecraftAlternativeAccount {
  id            String @id
  userId        String
  minecraftUUID String

  @@unique([userId, minecraftUUID])
}

model OneTimeToken {
  id        String   @id
  token     String   @unique
  createdAt DateTime @default(now())
  expires   DateTime
  userId    String

  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime

  @@index([userId])
}

model SignShop {
  id       String  @id
  location String  @unique
  ownerId  String
  itemb64  String?

  @@index([itemb64])
  @@index([ownerId])
}

model SpawnLocation {
  id          String @id
  location    String @unique
  name        String
  b64ItemIcon String @db.Text
}

model User {
  id                      String    @id
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  linkChallenge           String?   @unique
  minecraftUUID           String?   @unique
  isBotAdmin              Boolean   @default(false)
  balance                 Int       @default(0)
  canAccessAdminDashboard Boolean   @default(false)
  supporterUntil          DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuctionedItem_status {
  ACTIVE
  SOLD
  IN_TRANSIT
}

enum Application_status {
  PendingReview
  Approved
  Denied
}

enum Image_reviewStatus {
  Pending
  Approved
  Denied
}
